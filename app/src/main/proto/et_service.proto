syntax = "proto3";
option java_package = "inha.nsl.easytrack";


// user management module
message LoginWithGoogle{
  message Request{
    string idToken = 1;
  }
  message Response{
    bool success = 1;
    string sessionKey = 2;
  }
}
message BindUserToCampaign {
  message Request{
    string sessionKey = 1;
    int32 campaignId = 2;
  }
  message Response{
    bool success = 1;
    bool isFirstTimeBinding = 2;
    int64 campaignStartTimestamp = 3;
  }
}
message RetrieveParticipants {
  message Request{
    string sessionKey = 1;
    int32 campaignId = 2;
  }
  message Response{
    bool success = 1;
    repeated int32 userId = 2;
    repeated string email = 3;
    repeated string name = 4;
  }
}
message RetrieveParticipantStats {
  message Request{
    string sessionKey = 1;
    string targetEmail = 2;
    int32 targetCampaignId = 3;
  }
  message Response{
    bool success = 1;
    int32 activeCampaignId = 2;
    int64 campaignJoinTimestamp = 3;
    int64 lastSyncTimestamp = 4;
    int64 lastHeartbeatTimestamp = 5;
    int32 amountOfSubmittedDataSamples = 6;
    repeated int32 dataSourceId = 7;
    repeated int32 perDataSourceAmountOfData = 8;
    repeated int64 perDataSourceLastSyncTimestamp = 9;
  }
}

// campaign management module
message RegisterCampaign {
  message Request{
    string sessionKey = 1;
    int32 campaignId = 2;
    string name = 3;
    string notes = 4;
    string configJson = 5;
    int64 startTimestamp = 6;
    int64 endTimestamp = 7;
  }
  message Response{
    bool success = 1;
    int32 campaignId = 2;
  }
}
message DeleteCampaign {
  message Request{
    string sessionKey = 1;
    int32 campaignId = 2;
  }
  message Response{
    bool success = 1;
  }
}
message RetrieveCampaigns {
  message Request{
    string sessionKey = 1;
    bool myCampaignsOnly = 2;
  }
  message Response{
    bool success = 1;
    repeated int32 campaignId = 2;
    repeated string name = 3;
    repeated string notes = 4;
    repeated int64 startTimestamp = 5;
    repeated int64 endTimestamp = 6;
    repeated string creatorEmail = 7;
    repeated string configJson = 8;
    repeated int32 participantCount = 9;
  }
}
message RetrieveCampaign {
  message Request{
    string sessionKey = 1;
    int32 campaignId = 2;
  }
  message Response{
    bool success = 1;
    string name = 2;
    string notes = 3;
    int64 startTimestamp = 4;
    int64 endTimestamp = 5;
    string creatorEmail = 6;
    string configJson = 7;
    int32 participantCount = 8;
  }
}

// data source management module
message BindDataSource {
  message Request{
    string sessionKey = 1;
    string name = 2;
    string iconName = 3;
  }
  message Response{
    bool success = 1;
    int32 dataSourceId = 2;
    string iconName = 3;
  }
}
message RetrieveDataSources {
  message Request{
    string sessionKey = 1;
  }
  message Response{
    bool success = 1;
    repeated int32 dataSourceId = 2;
    repeated string name = 3;
    repeated string creatorEmail = 4;
    repeated string iconName = 5;
  }
}

// data management module
message SubmitDataRecord {
  message Request{
    string sessionKey = 1;
    int32 campaignId = 2;
    int64 timestamp = 3;
    int32 dataSource = 4;
    float accuracy = 5;
    bytes value = 6;
  }
  message Response{
    bool success = 1;
  }
}
message SubmitDataRecords {
  message Request{
    string sessionKey = 1;
    int32 campaignId = 2;
    repeated int64 timestamp = 3;
    repeated int32 dataSource = 4;
    repeated float accuracy = 5;
    repeated bytes value = 6;
  }
  message Response{
    bool success = 1;
  }
}
message RetrieveKNextDataRecords {
  message Request{
    string sessionKey = 1;
    string targetEmail = 2;
    int32 targetCampaignId = 3;
    int32 targetDataSourceId = 4;
    int32 k = 5;
    int32 fromTimestamp = 6;
  }
  message Response{
    bool success = 1;
    repeated int64 timestamp = 2;
    repeated bytes value = 4;
  }
}
message RetrieveFilteredDataRecords{
  message Request{
    string sessionKey = 1;
    string targetEmail = 2;
    int32 targetCampaignId = 3;
    int32 targetDataSourceId = 4;
    int64 fromTimestamp = 5;
    int64 tillTimestamp = 6;
    bool simplifyIfTooLarge = 7;
  }
  message Response{
    bool success = 1;
    repeated int64 timestamp = 2;
    repeated int32 dataSource = 3;
    repeated bytes value = 4;
  }
}
message DownloadDumpfile{
  message Request{
    string sessionKey = 1;
    int32 campaignId = 2;
    string targetEmail = 3;
  }
  message Response{
    bool success = 1;
    bytes dump = 2;
  }
}

// statistics module
message SubmitHeartbeat {
  message Request{
    string sessionKey = 1;
    int32 campaignId = 2;
  }
  message Response{
    bool success = 1;
  }
}

// communication management module
message SubmitDirectMessage {
  message Request{
    string sessionKey = 1;
    string targetEmail = 2;
    string subject = 3;
    string content = 4;
  }
  message Response{
    bool success = 1;
    int32 id = 2;
  }
}
message RetrieveUnreadDirectMessages {
  message Request{
    string sessionKey = 1;
  }
  message Response{
    bool success = 1;
    repeated int32 id = 2;
    repeated string sourceEmail = 3;
    repeated int64 timestamp = 4;
    repeated string subject = 5;
    repeated string content = 6;
  }
}
message SubmitNotification {
  message Request{
    string sessionKey = 1;
    int32 campaignId = 2;
    int64 timestamp = 3;
    string subject = 4;
    string content = 5;
  }
  message Response{
    bool success = 1;
    int32 id = 2;
  }
}
message RetrieveUnreadNotifications {
  message Request{
    string sessionKey = 1;
  }
  message Response{
    bool success = 1;
    repeated int32 id = 2;
    repeated int32 campaignId = 3;
    repeated int64 timestamp = 4;
    repeated string subject = 5;
    repeated string content = 6;
  }
}


service ETService {
  // user management module
  rpc loginWithGoogle (LoginWithGoogle.Request) returns (LoginWithGoogle.Response) {}
  rpc bindUserToCampaign (BindUserToCampaign.Request) returns (BindUserToCampaign.Response) {}
  rpc retrieveParticipants (RetrieveParticipants.Request) returns (RetrieveParticipants.Response) {}
  rpc retrieveParticipantStats (RetrieveParticipantStats.Request) returns (RetrieveParticipantStats.Response) {}

  // campaign management module
  rpc registerCampaign (RegisterCampaign.Request) returns (RegisterCampaign.Response) {}
  rpc deleteCampaign (DeleteCampaign.Request) returns (DeleteCampaign.Response) {}
  rpc retrieveCampaigns (RetrieveCampaigns.Request) returns (RetrieveCampaigns.Response) {}
  rpc retrieveCampaign (RetrieveCampaign.Request) returns (RetrieveCampaign.Response) {}

  // data source management module
  rpc bindDataSource (BindDataSource.Request) returns (BindDataSource.Response) {}
  rpc retrieveDataSources (RetrieveDataSources.Request) returns (RetrieveDataSources.Response) {}

  // data management module
  rpc submitDataRecord (SubmitDataRecord.Request) returns (SubmitDataRecord.Response) {}
  rpc submitDataRecords (SubmitDataRecords.Request) returns (SubmitDataRecords.Response) {}
  rpc retrieveKNextDataRecords (RetrieveKNextDataRecords.Request) returns (RetrieveKNextDataRecords.Response) {}
  rpc retrieveFilteredDataRecords (RetrieveFilteredDataRecords.Request) returns (RetrieveFilteredDataRecords.Response) {}
  rpc downloadDumpfile (DownloadDumpfile.Request) returns (DownloadDumpfile.Response){}

  // statistics module
  rpc submitHeartbeat (SubmitHeartbeat.Request) returns (SubmitHeartbeat.Response) {}

  // communication management module
  rpc submitDirectMessage (SubmitDirectMessage.Request) returns (SubmitDirectMessage.Response) {}
  rpc retrieveUnreadDirectMessages (RetrieveUnreadDirectMessages.Request) returns (RetrieveUnreadDirectMessages.Response) {}
  rpc submitNotification (SubmitNotification.Request) returns (SubmitNotification.Response) {}
  rpc retrieveUnreadNotifications (RetrieveUnreadNotifications.Request) returns (RetrieveUnreadNotifications.Response) {}
}


/*
gRPC HOWTO:
Compile into python script:
    python -m grpc_tools.protoc -I=[input directory] --python_out=[output directory] --grpc_python_out=[output directory] [file name].proto
    python -m grpc_tools.protoc -I=./et_protos/ --python_out=./et_grpcs/ --grpc_python_out=./et_grpcs/ et_service.proto
Compile into java source:
    protoc --java_out=[output directory] --grpc_java_out=[output directory] [file name].proto
Compile into dart / flutter:
    protoc -I=[input directory] --dart_out=grpc:[output directory] [file name].proto
Compile into swift:
    protoc -I=[input directory] --swift_out=[output directory] --grpc-swift_out=[output directory] [file name].proto
etc.
*/
